<!-- Views/Products/Edit.cshtml -->

@model ToZeptyUI.Models.ProductViewModel

@{
    ViewBag.Title = "Edit Product";
}

<h2>@ViewBag.Title</h2>

@if (!ViewData.ModelState.IsValid)
{
    <div class="alert alert-danger">
        <ul>
            @foreach (var modelState in ViewData.ModelState.Values)
            {
                foreach (var error in modelState.Errors)
                {
                    <li>@error.ErrorMessage</li>
                }
            }
        </ul>
    </div>
}

@using (Html.BeginForm("Edit", "Product", FormMethod.Post, new { enctype = "multipart/form-data" }))
{
    @Html.AntiForgeryToken()
    @Html.HiddenFor(model => model.ProductId)
    <div class="form-group">
        @Html.LabelFor(model => model.Name)
        @Html.EditorFor(model => model.Name, new { htmlAttributes = new { @class = "form-control" } })
        @Html.ValidationMessageFor(model => model.Name, "", new { @class = "text-danger" })
    </div>

    <div class="form-group">
        @Html.LabelFor(model => model.Description)
        @Html.EditorFor(model => model.Description, new { htmlAttributes = new { @class = "form-control" } })
        @Html.ValidationMessageFor(model => model.Description, "", new { @class = "text-danger" })
    </div>

    <div class="form-group">
        @Html.LabelFor(model => model.Price)
        @Html.EditorFor(model => model.Price, new { htmlAttributes = new { @class = "form-control" } })
        @Html.ValidationMessageFor(model => model.Price, "", new { @class = "text-danger" })
    </div>

    <div class="form-group">
        @Html.LabelFor(model => model.ProductQuantity, "Avaliable Quantity", new { @class = "control-label" })
        @Html.EditorFor(model => model.ProductQuantity, new { htmlAttributes = new { @class = "form-control", type = "number" } })
        @Html.ValidationMessageFor(model => model.ProductQuantity, "", new { @class = "text-danger" })
    </div>

    <div class="form-group">
        @Html.Label("Current Image", new { @class = "control-label" })
        <br />
        @if (!string.IsNullOrEmpty(Model.ImageFileName))
        {
            <img src="@Url.Content($"~/Images/{Model.ImageFileName}")" alt="Current Image" style="max-width: 200px;" />
        }
        else
        {
            <p>No Image Available</p>
        }
    </div>

    <div class="form-group">
        @Html.LabelFor(model => model.ImageFile, "Add new image ", new { @class = "control-label" })
        <input type="file" name="ImageFile" />
        @Html.ValidationMessageFor(model => model.ImageFile, "", new { @class = "text-danger" })
    </div>

    <div class="form-group">
        @Html.LabelFor(model => model.CategoryId, new { @class = "control-label col-md-2" })
        <div class="col-md-10">
            @Html.DropDownListFor(model => model.CategoryId, Model.Categories, new { @class = "form-control" })
            @Html.ValidationMessageFor(model => model.CategoryId, "", new { @class = "text-danger" })
        </div>
    </div>

    <div class="form-group">
        <input type="submit" value="Update" class="btn btn-dark" />
    </div>
}


<script>
    setTimeout(function () {
        document.getElementById('errorMessage').style.display = 'none';
    }, 10000); 
</script>